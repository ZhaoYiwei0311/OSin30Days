     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; オブジェクトファイルを作るモード	
     5 00000000                                 [INSTRSET "i486p"]				; 486の命令まで使いたいという記述
     6 00000000                                 [BITS 32]						; 32ビットモード用の機械語を作らせる
     7 00000000                                 [FILE "naskfunc.nas"]			; ソースファイル名情報
     8 00000000                                 
     9 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    10 00000000                                 		GLOBAL	_io_in8,  _io_in16,  _io_in32
    11 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    12 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    13 00000000                                 		GLOBAL	_load_gdtr, _load_idtr
    14 00000000                                 		GLOBAL	_load_cr0, _store_cr0
    15 00000000                                 		GLOBAL	_load_tr
    16 00000000                                 		GLOBAL	_asm_inthandler20, _asm_inthandler21
    17 00000000                                 		GLOBAL	_asm_inthandler27, _asm_inthandler2c
    18 00000000                                 		GLOBAL	_memtest_sub
    19 00000000                                 		GLOBAL	_farjmp
    20 00000000                                 		EXTERN	_inthandler20, _inthandler21
    21 00000000                                 		EXTERN	_inthandler27, _inthandler2c
    22 00000000                                 
    23                                          [SECTION .text]
    24 00000000                                 
    25 00000000                                 _io_hlt:	; void io_hlt(void);
    26 00000000 F4                              		HLT
    27 00000001 C3                              		RET
    28 00000002                                 
    29 00000002                                 _io_cli:	; void io_cli(void);
    30 00000002 FA                              		CLI
    31 00000003 C3                              		RET
    32 00000004                                 
    33 00000004                                 _io_sti:	; void io_sti(void);
    34 00000004 FB                              		STI
    35 00000005 C3                              		RET
    36 00000006                                 
    37 00000006                                 _io_stihlt:	; void io_stihlt(void);
    38 00000006 FB                              		STI
    39 00000007 F4                              		HLT
    40 00000008 C3                              		RET
    41 00000009                                 
    42 00000009                                 _io_in8:	; int io_in8(int port);
    43 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    44 0000000D B8 00000000                     		MOV		EAX,0
    45 00000012 EC                              		IN		AL,DX
    46 00000013 C3                              		RET
    47 00000014                                 
    48 00000014                                 _io_in16:	; int io_in16(int port);
    49 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    50 00000018 B8 00000000                     		MOV		EAX,0
    51 0000001D 66 ED                           		IN		AX,DX
    52 0000001F C3                              		RET
    53 00000020                                 
    54 00000020                                 _io_in32:	; int io_in32(int port);
    55 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    56 00000024 ED                              		IN		EAX,DX
    57 00000025 C3                              		RET
    58 00000026                                 
    59 00000026                                 _io_out8:	; void io_out8(int port, int data);
    60 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    61 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    62 0000002E EE                              		OUT		DX,AL
    63 0000002F C3                              		RET
    64 00000030                                 
    65 00000030                                 _io_out16:	; void io_out16(int port, int data);
    66 00000030 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    67 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    68 00000038 66 EF                           		OUT		DX,AX
    69 0000003A C3                              		RET
    70 0000003B                                 
    71 0000003B                                 _io_out32:	; void io_out32(int port, int data);
    72 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    73 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    74 00000043 EF                              		OUT		DX,EAX
    75 00000044 C3                              		RET
    76 00000045                                 
    77 00000045                                 _io_load_eflags:	; int io_load_eflags(void);
    78 00000045 9C                              		PUSHFD		; PUSH EFLAGS という意味
    79 00000046 58                              		POP		EAX
    80 00000047 C3                              		RET
    81 00000048                                 
    82 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    83 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    84 0000004C 50                              		PUSH	EAX
    85 0000004D 9D                              		POPFD		; POP EFLAGS という意味
    86 0000004E C3                              		RET
    87 0000004F                                 
    88 0000004F                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    89 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    90 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
    91 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
    92 0000005E C3                              		RET
    93 0000005F                                 
    94 0000005F                                 _load_idtr:		; void load_idtr(int limit, int addr);
    95 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    96 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
    97 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
    98 0000006E C3                              		RET
    99 0000006F                                 
   100 0000006F                                 _asm_inthandler20:
   101 0000006F 06                              		PUSH 	ES
   102 00000070 1E                              		PUSH	DS
   103 00000071 60                              		PUSHAD
   104 00000072 89 E0                           		MOV 	EAX,ESP
   105 00000074 50                              		PUSH	EAX
   106 00000075 66 8C D0                        		MOV		AX,SS
   107 00000078 8E D8                           		MOV		DS,AX
   108 0000007A 8E C0                           		MOV		ES,AX
   109 0000007C E8 [00000000]                   		CALL	_inthandler20
   110 00000081 58                              		POP		EAX
   111 00000082 61                              		POPAD
   112 00000083 1F                              		POP		DS
   113 00000084 07                              		POP		ES
   114 00000085 CF                              		IRETD
   115 00000086                                 
   116 00000086                                 _asm_inthandler21:
   117 00000086 06                              		PUSH	ES
   118 00000087 1E                              		PUSH	DS
   119 00000088 60                              		PUSHAD
   120 00000089 89 E0                           		MOV		EAX,ESP
   121 0000008B 50                              		PUSH	EAX
   122 0000008C 66 8C D0                        		MOV		AX,SS
   123 0000008F 8E D8                           		MOV		DS,AX
   124 00000091 8E C0                           		MOV		ES,AX
   125 00000093 E8 [00000000]                   		CALL	_inthandler21
   126 00000098 58                              		POP		EAX
   127 00000099 61                              		POPAD
   128 0000009A 1F                              		POP		DS
   129 0000009B 07                              		POP		ES
   130 0000009C CF                              		IRETD
   131 0000009D                                 
   132 0000009D                                 _asm_inthandler27:
   133 0000009D 06                              		PUSH	ES
   134 0000009E 1E                              		PUSH	DS
   135 0000009F 60                              		PUSHAD
   136 000000A0 89 E0                           		MOV		EAX,ESP
   137 000000A2 50                              		PUSH	EAX
   138 000000A3 66 8C D0                        		MOV		AX,SS
   139 000000A6 8E D8                           		MOV		DS,AX
   140 000000A8 8E C0                           		MOV		ES,AX
   141 000000AA E8 [00000000]                   		CALL	_inthandler27
   142 000000AF 58                              		POP		EAX
   143 000000B0 61                              		POPAD
   144 000000B1 1F                              		POP		DS
   145 000000B2 07                              		POP		ES
   146 000000B3 CF                              		IRETD
   147 000000B4                                 
   148 000000B4                                 _asm_inthandler2c:
   149 000000B4 06                              		PUSH	ES
   150 000000B5 1E                              		PUSH	DS
   151 000000B6 60                              		PUSHAD
   152 000000B7 89 E0                           		MOV		EAX,ESP
   153 000000B9 50                              		PUSH	EAX
   154 000000BA 66 8C D0                        		MOV		AX,SS
   155 000000BD 8E D8                           		MOV		DS,AX
   156 000000BF 8E C0                           		MOV		ES,AX
   157 000000C1 E8 [00000000]                   		CALL	_inthandler2c
   158 000000C6 58                              		POP		EAX
   159 000000C7 61                              		POPAD
   160 000000C8 1F                              		POP		DS
   161 000000C9 07                              		POP		ES
   162 000000CA CF                              		IRETD
   163 000000CB                                 
   164 000000CB                                 _load_cr0:		; int load_cr0(void);
   165 000000CB 0F 20 C0                        		MOV		EAX,CR0
   166 000000CE C3                              		RET
   167 000000CF                                 
   168 000000CF                                 _load_tr:		; void load_tr(int tr);
   169 000000CF 0F 00 5C 24 04                  		LTR		[ESP+4]			; tr
   170 000000D4 C3                              		RET
   171 000000D5                                 
   172 000000D5                                 _store_cr0:		; void store_cr0(int cr0);
   173 000000D5 8B 44 24 04                     		MOV		EAX,[ESP+4]
   174 000000D9 0F 22 C0                        		MOV		CR0,EAX
   175 000000DC C3                              		RET
   176 000000DD                                 
   177 000000DD                                 _memtest_sub: 	; unsigned int memetest_sub(unsigned int start, unsigned int end)
   178 000000DD 57                              		PUSH	EDI		; 由于还要使用EBX, ESI, EDI
   179 000000DE 56                              		PUSH 	ESI
   180 000000DF 53                              		PUSH 	EBX
   181 000000E0 BE AA55AA55                     		MOV 	ESI,0Xaa55aa55		; pat0 = 0xaa55aa55;
   182 000000E5 BF 55AA55AA                     		MOV 	EDI,0X55aa55aa		; pat1 = 0x55aa55aa;
   183 000000EA 8B 44 24 10                     		MOV 	EAX,[ESP+12+4]		; i = start;
   184 000000EE                                 
   185 000000EE                                 mts_loop:
   186 000000EE 89 C3                           		MOV 	EBX,EAX
   187 000000F0 81 C3 00000FFC                  		ADD 	EBX,0xffc		; p = i + 0xffc;
   188 000000F6 8B 13                           		MOV 	EDX,[EBX]		; old = *p;
   189 000000F8 89 33                           		MOV		[EBX],ESI		; *p = pat0;
   190 000000FA 83 33 FF                        		XOR		DWORD [EBX],0xffffffff		; *p ^= 0xffffffff;
   191 000000FD 3B 3B                           		CMP		EDI,[EBX]					; if (*p != pat1) goto fin;
   192 000000FF 75 18                           		JNE 	mts_fin
   193 00000101 83 33 FF                        		XOR     DWORD [EBX],0xffffffff  	; *p ^= 0xffffffff;
   194 00000104 3B 33                                   CMP     ESI,[EBX]               	; if (*p != pat0) goto fin;
   195 00000106 75 11                                   JNE     mts_fin	
   196 00000108 89 13                           		MOV 	[EBX],EDX		; *p = old;
   197 0000010A 05 00001000                     		ADD		EAX,0x1000		; i += 0x1000;
   198 0000010F 3B 44 24 14                     		CMP		EAX,[ESP+12+8]	; if (i <= end) goto mts_loop;
   199 00000113 76 D9                           		JBE		mts_loop
   200 00000115 5B                              		POP 	EBX
   201 00000116 5E                              		POP		ESI
   202 00000117 5F                              		POP		EDI
   203 00000118 C3                              		RET
   204 00000119                                 
   205 00000119                                 mts_fin:
   206 00000119 89 13                           		MOV 	[EBX],EDX		; *p = old
   207 0000011B 5B                              		POP		EBX
   208 0000011C 5E                              		POP		ESI
   209 0000011D 5F                              		POP		EDI
   210 0000011E C3                              		RET
   211 0000011F                                 
   212 0000011F                                 _taskswitch4:	; void taskswitch4(void);
   213 0000011F EA 00000000 0020                		JMP		4*8:0
   214 00000126 C3                              		RET
   215 00000127                                 
   216 00000127                                 _taskswitch3:	; void taskswitch3(void);
   217 00000127 EA 00000000 0018                		JMP		3*8:0
   218 0000012E C3                              		RET
   219 0000012F                                 
   220 0000012F                                 _farjmp:		; void farjmp(int eip, int cs);
   221 0000012F FF 6C 24 04                     		JMP 	FAR [ESP+4]		; eip, cs
   222 00000133 C3                              		RET